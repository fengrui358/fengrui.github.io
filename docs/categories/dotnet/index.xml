<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>dotnet - 分类 - free note</title><link>https://frhello.com/categories/dotnet/</link><description>dotnet - 分类 - free note</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>qjdev@qq.com (feng rui)</managingEditor><webMaster>qjdev@qq.com (feng rui)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 10 Mar 2018 09:09:42 +0800</lastBuildDate><atom:link href="https://frhello.com/categories/dotnet/" rel="self" type="application/rss+xml"/><item><title>CentOS 部署 .NetCore 服务</title><link>https://frhello.com/centos-%E9%83%A8%E7%BD%B2-.netcore-%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 10 Mar 2018 09:09:42 +0800</pubDate><author>作者</author><guid>https://frhello.com/centos-%E9%83%A8%E7%BD%B2-.netcore-%E6%9C%8D%E5%8A%A1/</guid><description>安装 CentOs，可使用最小安装包镜像 http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1708.iso 跟随安装步骤进行，中途要选择磁盘 设置 Root 用户密码 安装完毕后重启，进入系统，CentOs 最小版缺少一些必</description></item><item><title>C# 为何不推荐在构造函数中访问虚成员</title><link>https://frhello.com/csharp%E4%B8%BA%E4%BD%95%E4%B8%8D%E6%8E%A8%E8%8D%90%E5%9C%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E8%AE%BF%E9%97%AE%E8%99%9A%E6%88%90%E5%91%98/</link><pubDate>Sat, 03 Jun 2017 23:25:19 +0800</pubDate><author>作者</author><guid>https://frhello.com/csharp%E4%B8%BA%E4%BD%95%E4%B8%8D%E6%8E%A8%E8%8D%90%E5%9C%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E8%AE%BF%E9%97%AE%E8%99%9A%E6%88%90%E5%91%98/</guid><description>如果在一个类中定义了虚属性或者虚方法，又在构造函数中访问了这个虚属性或方法，此时 VisualStudio 是不会给出警告，并且编译也没有问题，但是如果安装了 Resharper 插件则</description></item><item><title>Timer 的性能优势</title><link>https://frhello.com/timer-%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8A%BF/</link><pubDate>Wed, 22 Jun 2016 11:48:11 +0800</pubDate><author>作者</author><guid>https://frhello.com/timer-%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8A%BF/</guid><description>假如有这样一个场景，1 个 100 万用户同时在线的系统，假设有一个 Session 管理器来管理它们的存亡，每个用户的 Session 有效时间假设 5 分钟，通常一个最简单的做法是在</description></item><item><title>Task.Run Vs Task.Factory.StartNew</title><link>https://frhello.com/task.run-vs-task.factory.startnew/</link><pubDate>Sat, 05 Mar 2016 15:44:41 +0800</pubDate><author>作者</author><guid>https://frhello.com/task.run-vs-task.factory.startnew/</guid><description>在 .Net 4 中，Task.Factory.StartNew是启动一个新Task的首选方法。它有很多重载方法，使它在具体使用当中可以非常灵活，通过设</description></item><item><title>日志框架对比 NLog VS Log4net</title><link>https://frhello.com/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94-nlog-vs-log4net/</link><pubDate>Sat, 16 Jan 2016 19:43:14 +0800</pubDate><author>作者</author><guid>https://frhello.com/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94-nlog-vs-log4net/</guid><description>Log4net 先说 Log4net，它是.net 平台上一个老牌的日志框架，我接触的时间也不长(因为公司有自己的日志库)，但是看着各开源库都在用这个于是前段</description></item></channel></rss>
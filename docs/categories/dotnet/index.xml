<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>dotnet - 分类 - free note</title><link>https://frhello.com/categories/dotnet/</link><description>dotnet - 分类 - free note</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>qjdev@qq.com (feng rui)</managingEditor><webMaster>qjdev@qq.com (feng rui)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 11 Jun 2020 21:53:51 +0800</lastBuildDate><atom:link href="https://frhello.com/categories/dotnet/" rel="self" type="application/rss+xml"/><item><title>RabbitMQ 笔记</title><link>https://frhello.com/rabbitmq-%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 11 Jun 2020 21:53:51 +0800</pubDate><author>作者</author><guid>https://frhello.com/rabbitmq-%E7%AC%94%E8%AE%B0/</guid><description>RabbitMQ，提供负载均衡的消息队列功能，自动化的将消息按规则分配到不同消费者身上。 安装 RabbitMQ 安装非常简单，首先安装 Erlang，然后安装服</description></item><item><title>CefSharp 内存溢出问题排查</title><link>https://frhello.com/cefsharp-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link><pubDate>Thu, 16 Apr 2020 10:26:42 +0800</pubDate><author>作者</author><guid>https://frhello.com/cefsharp-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid><description>今天测试人员报公司的 WPF 程序启动崩溃，下面记录这个问题的跟踪流程。 首先排除是否为发版问题，向测试要了测试环境的程序，运行奔溃，观察日志报 Sys</description></item><item><title>WPF 程序使用 CefSharp</title><link>https://frhello.com/wpf-%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8-cefsharp/</link><pubDate>Wed, 08 Apr 2020 17:41:18 +0800</pubDate><author>作者</author><guid>https://frhello.com/wpf-%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8-cefsharp/</guid><description><![CDATA[添加 AnyCPU 支持 需要在项目配置文件的第一个 &lt;PropertyGroup&gt; 节点中添加 &lt;CefSharpAnyCpuSupport&gt;true&lt;/CefSharpAnyCpuSupport&gt; WPF 启动时代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36]]></description></item><item><title>Automapper 学习笔记</title><link>https://frhello.com/automapper-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 28 Jan 2020 23:35:38 +0800</pubDate><author>作者</author><guid>https://frhello.com/automapper-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>本文基于 Automapper 9.0.0 诊断 Automapper 的属性映射过程 1 2 3 4 5 var cfg = new MapperConfigurationExpression(); cfg.CreateMap&amp;lt;TypeB, TypeA&amp;gt;(); var configuration = new MapperConfiguration(cfg); var executionPlan = configuration.BuildExecutionPlan(typeof(TypeB), typeof(TypeA)); 最关键的一行代码 var executionPlan = configuration.BuildExecutionPlan(typeof(TypeB), typeof(TypeA));，此时查看</description></item><item><title>CentOS 部署 .NetCore 服务</title><link>https://frhello.com/centos-%E9%83%A8%E7%BD%B2-.netcore-%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 10 Mar 2018 09:09:42 +0800</pubDate><author>作者</author><guid>https://frhello.com/centos-%E9%83%A8%E7%BD%B2-.netcore-%E6%9C%8D%E5%8A%A1/</guid><description>安装 CentOs，可使用最小安装包镜像 http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1708.iso 跟随安装步骤进行，中途要选择磁盘 设置 Root 用户密码 安装完毕后重启，进入系统，CentOs 最小版缺少一些必</description></item><item><title>C# 为何不推荐在构造函数中访问虚成员</title><link>https://frhello.com/csharp%E4%B8%BA%E4%BD%95%E4%B8%8D%E6%8E%A8%E8%8D%90%E5%9C%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E8%AE%BF%E9%97%AE%E8%99%9A%E6%88%90%E5%91%98/</link><pubDate>Sat, 03 Jun 2017 23:25:19 +0800</pubDate><author>作者</author><guid>https://frhello.com/csharp%E4%B8%BA%E4%BD%95%E4%B8%8D%E6%8E%A8%E8%8D%90%E5%9C%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E8%AE%BF%E9%97%AE%E8%99%9A%E6%88%90%E5%91%98/</guid><description>如果在一个类中定义了虚属性或者虚方法，又在构造函数中访问了这个虚属性或方法，此时 VisualStudio 是不会给出警告，并且编译也没有问题，但是如果安装了 Resharper 插件则</description></item><item><title>NLog 配置详解</title><link>https://frhello.com/nlog-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</link><pubDate>Wed, 26 Apr 2017 16:13:11 +0800</pubDate><author>作者</author><guid>https://frhello.com/nlog-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</guid><description>纵览 NLog 在启动时会自动的去加载配置，总的说来 NLog 的配置会来源于两个地方： 配置嵌入在标准的 *.exe.config 或者 web.config 文件。 存储在一个单独的配置文件中。 对于 Xamarin Andr</description></item><item><title>NLog 简介</title><link>https://frhello.com/nlog-%E7%AE%80%E4%BB%8B/</link><pubDate>Thu, 16 Mar 2017 15:23:41 +0800</pubDate><author>作者</author><guid>https://frhello.com/nlog-%E7%AE%80%E4%BB%8B/</guid><description>安装 Nlog 通过 NuGet 安装，可以看到排名靠前的有两个，一个是 NLog，还有一个是 NLog.Config，推荐安装第二个，除了安装 NLog 程序集以外还会安装它</description></item><item><title>Timer 的性能优势</title><link>https://frhello.com/timer-%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8A%BF/</link><pubDate>Wed, 22 Jun 2016 11:48:11 +0800</pubDate><author>作者</author><guid>https://frhello.com/timer-%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8A%BF/</guid><description>假如有这样一个场景，1 个 100 万用户同时在线的系统，假设有一个 Session 管理器来管理它们的存亡，每个用户的 Session 有效时间假设 5 分钟，通常一个最简单的做法是在</description></item><item><title>Task.Run Vs Task.Factory.StartNew</title><link>https://frhello.com/task.run-vs-task.factory.startnew/</link><pubDate>Sat, 05 Mar 2016 15:44:41 +0800</pubDate><author>作者</author><guid>https://frhello.com/task.run-vs-task.factory.startnew/</guid><description>在 .Net 4 中，Task.Factory.StartNew是启动一个新Task的首选方法。它有很多重载方法，使它在具体使用当中可以非常灵活，通过设</description></item></channel></rss>